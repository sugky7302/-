import 模板


class EffectManager:
    private:
        static _templates_ <- an empty array from 0
        _list_ <- an empty dict
        
        func _create(name)
            _list_[name] <- Effect(_templates_[name], self)
        end func
        
    public:
        func __ctr__()
            _list_ <- an empty dict
        end func

        func add(data)
            instance <- _list_[data.name]
            if instance不存在 then
                instance <- _create(data.name)
            end if

            if 沒有instance then
                return nil
            end if
            
            instance.getTemplates = getTemplates

            instance.start(data)

            return instance
        end func

        func find(name)
            for effect (_list_) do
                if effect["name"] == name then
                    return effect
                end if
            end for
            return nil
        end func

        func delete(name)
            if _list_[name] 不存在 then
                return 
            end if

            _list_[name].clear()
        end func
end class

class Effect
    private:
        manager: 儲存管理器的引用

        func _addModel()
            if _model_存在 then
                添加特效
            end if
        end func

        func _removeModel()
            if _model_存在 then
                刪除特效
            end if
        end func

        func _setMode(task)
            if self沒有任務 then
                self.begin <- self
                return
            end if

            if mode == 獨佔模式 then
                if self.on_cover不存在 then
                    return
                end if

                if self.on_cover(self.begin, task) == false then
                    return
                end if

                self.begin <- task
            else
                for i (self.begin to self.end) do
                    if self[i]不存在 then
                        self[i] <- task

                        if self.max != 0 and i > self.max then
                            self.pause(task)
                        end if

                        break
                    end if
                end for
            end if
        end func

        func _startTimer(task)
            task.remained_time <- task.time
            if self.on_pulse then
                Timer(self.period, 重複, func()
                    self.on_pulse(task)

                    task.remained_time <- task.remained_time - self.period
                    if 結束 then
                        self.finish(task)
                    end if
                end func)
            else
                Timer(task.time, 單一, func()
                    self.finish(task)
                end func)
            end if
        end func

    public:
        func __ctr__(template)
            instance <- 複製一份template的副本
            設定instance為Effect實例
            return instance
        end func

        func start(task)
            設定模式
            調用添加事件
            添加特效
            設定時間並啟動計時器
        end func

        func clear()
            for i (self.end to self.begin) do
                self.delete(self[i])
            end for
        end func  

        func delete(task)
            關閉計時器
            調用刪除事件
            刪除Effect
            刪除特效
        end func

         只有在計時器裡會用到
        func finish(task)
            調用完成事件
            刪除Effect
            刪除特效
        end func

        func pause(task)
            暫停計時器
            調用刪除事件
            暫停Effect
            刪除特效
        end func

        func resume(task)
            調用添加事件
            添加特效
            恢復計時器
        end func
end class
